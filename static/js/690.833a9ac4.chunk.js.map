{"version":3,"file":"static/js/690.833a9ac4.chunk.js","mappings":"+OAKA,MCLyD,GAAgBA,UDKpD,CACjBC,KAAM,aACNC,QAAS,oJACTC,YAAa,qGACbC,YAAa,kBACbC,IAAK,ynBAoCLC,QAAS,CACLC,QAAQ,EACRC,UAAW,mBACXC,MAAO,kVAePC,KAAM,CAAC,CACXC,MAAO,mDACPR,YAAa,mDACbS,KAAM,wnFAmENC,MAAO,CAAC,CACRZ,KAAM,QACNG,YAAa,8BACbU,UAAW,GACb,CACEb,KAAM,OACNG,YAAa,OACbU,UAAW,GACb,CACEb,KAAM,aACNG,YAAa,mBACbU,UAAW,GACb,CACEb,KAAM,SACNG,YAAa,QACbU,UAAW,GACb,CACEb,KAAM,eACNG,YAAa,qBACbU,UAAW,KAEb,CACEH,MAAO,mDACPR,YAAa,mDACbS,KAAM,ysDA8DNC,MAAO,CAAC,CACRZ,KAAM,QACNG,YAAa,8BACbU,UAAW,GACb,CACEb,KAAM,OACNG,YAAa,OACbU,UAAW,GACb,CACEb,KAAM,aACNG,YAAa,mBACbU,UAAW,GACb,CACEb,KAAM,SACNG,YAAa,QACbU,UAAW,GACb,CACEb,KAAM,eACNG,YAAa,qBACbU,UAAW,SC9OFC,EAAW,CAAC,KAAO,aAAa,QAAU,QAAQ,gBAAe,EAAK,aAAa,cAAc,QAAU,CAAC,CAAC,KAAO,aAAa,QAAU,0CAA0C,YAAc,qGAA0B,YAAc,oB","sources":["../../README.md","../node_modules/readme/modules.js"],"sourcesContent":["import * as component_1 from '@kne/current-lib_react-icon';\nimport * as component_2 from 'antd';\nimport * as component_3 from '@kne/react-fetch';\nimport * as component_4 from 'axios';\nimport * as component_5 from '@kne/remote-loader';\nconst readmeConfig = {\n    name: `react-icon`,\n    summary: `<p>可以显示一个图标，图标必须在字体文件中被定义过</p>`,\n    description: `用于将一个font或svg展示为一个图标组件.`,\n    packageName: `@kne/react-icon`,\n    api: `<table>\n<thead>\n<tr>\n<th>属性名</th>\n<th>说明</th>\n<th>类型</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>type</td>\n<td>图标类型，参考示例下的字符串</td>\n<td>string</td>\n<td>-</td>\n</tr>\n<tr>\n<td>colorful</td>\n<td>是否是彩色图标</td>\n<td>boolean</td>\n<td>false</td>\n</tr>\n<tr>\n<td>prefix</td>\n<td>图标前缀</td>\n<td>string</td>\n<td>\"\"</td>\n</tr>\n<tr>\n<td>size</td>\n<td>图标大小</td>\n<td>number</td>\n<td>-</td>\n</tr>\n</tbody>\n</table>`,\n    example: {\n        isFull: true,\n        className: `react_icon_c6add`,\n        style: `.react_icon_c6add .item {\n  width: 150px;\n  word-break: break-all;\n}\n.react_icon_c6add .item .ant-typography {\n  position: relative;\n}\n.react_icon_c6add .item .ant-typography-copy {\n  visibility: hidden;\n  position: absolute;\n  right: -20px;\n}\n.react_icon_c6add .item:hover .ant-typography-copy {\n  visibility: visible;\n}`,\n        list: [{\n    title: `这里填写示例标题`,\n    description: `这里填写示例说明`,\n    code: `const {default: Icon} = _Icon;\nconst {Slider, Space, Typography} = antd;\nconst {useState} = React;\nconst {createWithFetch} = ReactFetch;\nconst {default: axios} = _axios;\nconst {createWithRemoteLoader} = remoteLoader;\n\nconst BaseExample = createWithRemoteLoader({\n    modules: [\"components-iconfont:Font\"],\n})(({remoteModules}) => {\n    const [Font] = remoteModules;\n    const [value, setValue] = useState(30);\n    return (\n        <Space direction=\"vertical\">\n            <Space>\n                <div>调整大小:</div>\n                <Slider\n                    style={{width: 100}}\n                    max={60}\n                    min={12}\n                    value={value}\n                    onChange={setValue}\n                />\n                <div>{value}px</div>\n            </Space>\n            {\n                <Font>\n                    {({list}) => {\n                        return (\n                            <Space wrap align=\"top\" size=\"large\">\n                                {list.map(({name, font_class}) => {\n                                    return (\n                                        <Space\n                                            className=\"item\"\n                                            direction=\"vertical\"\n                                            align=\"center\"\n                                            key={name}\n                                        >\n                                            <Icon type={font_class} size={value}/>\n                                            <Typography.Text\n                                                copyable={{\n                                                    text:\n                                                        '<Icon type=\"' +\n                                                        font_class +\n                                                        '\" size={' +\n                                                        value +\n                                                        \"} />\",\n                                                }}\n                                            >\n                                                {font_class}\n                                            </Typography.Text>\n                                            <div>{name}</div>\n                                        </Space>\n                                    );\n                                })}\n                            </Space>\n                        );\n                    }}\n                </Font>\n            }\n        </Space>\n    );\n});\n\nrender(<BaseExample/>);\n\n`,\n    scope: [{\n    name: \"_Icon\",\n    packageName: \"@kne/current-lib_react-icon\",\n    component: component_1\n},{\n    name: \"antd\",\n    packageName: \"antd\",\n    component: component_2\n},{\n    name: \"ReactFetch\",\n    packageName: \"@kne/react-fetch\",\n    component: component_3\n},{\n    name: \"_axios\",\n    packageName: \"axios\",\n    component: component_4\n},{\n    name: \"remoteLoader\",\n    packageName: \"@kne/remote-loader\",\n    component: component_5\n}]\n},{\n    title: `这里填写示例标题`,\n    description: `这里填写示例说明`,\n    code: `const { default: Icon } = _Icon;\nconst { Space, Slider, Typography } = antd;\nconst { useState } = React;\nconst { createWithFetch } = ReactFetch;\nconst { createWithRemoteLoader } = remoteLoader;\nconst { default: axios } = _axios;\n\nconst BaseExample = createWithRemoteLoader({\n  modules: [\"components-iconfont:ColorfulFont\"],\n})(({ remoteModules }) => {\n  const [ColorfulFont] = remoteModules;\n  const [value, setValue] = useState(30);\n  return (\n    <Space direction=\"vertical\">\n      <Space>\n        <div>调整大小:</div>\n        <Slider\n          style={{ width: 100 }}\n          max={60}\n          min={12}\n          value={value}\n          onChange={setValue}\n        />\n        <div>{value}px</div>\n      </Space>\n      <ColorfulFont>\n        {({ list }) => (\n          <Space wrap align=\"top\" size=\"large\">\n            {list.map(({ name }) => {\n              return (\n                <Space\n                  className=\"item\"\n                  direction=\"vertical\"\n                  align=\"center\"\n                  key={name}\n                >\n                  <Icon colorful type={name} size={value} />\n                  <Typography.Text\n                    copyable={{\n                      text:\n                        '<Icon colorful type=\"' +\n                        name +\n                        '\" size={' +\n                        value +\n                        \"} />\",\n                    }}\n                  >\n                    {name}\n                  </Typography.Text>\n                </Space>\n              );\n            })}\n          </Space>\n        )}\n      </ColorfulFont>\n    </Space>\n  );\n});\n\nrender(<BaseExample />);\n\n`,\n    scope: [{\n    name: \"_Icon\",\n    packageName: \"@kne/current-lib_react-icon\",\n    component: component_1\n},{\n    name: \"antd\",\n    packageName: \"antd\",\n    component: component_2\n},{\n    name: \"ReactFetch\",\n    packageName: \"@kne/react-fetch\",\n    component: component_3\n},{\n    name: \"_axios\",\n    packageName: \"axios\",\n    component: component_4\n},{\n    name: \"remoteLoader\",\n    packageName: \"@kne/remote-loader\",\n    component: component_5\n}]\n}]\n    }\n};\nexport default readmeConfig;\n","import ReactIcon from '@components/react-icon/README.md';export default {ReactIcon};\nexport const manifest = {\"name\":\"react-icon\",\"version\":\"0.1.2\",\"open-version\":true,\"public-url\":\"/react-icon\",\"modules\":[{\"name\":\"react-icon\",\"baseDir\":\"/home/runner/work/react-icon/react-icon\",\"description\":\"用于将一个font或svg展示为一个图标组件.\",\"packageName\":\"@kne/react-icon\"}]};"],"names":["ReactIcon","name","summary","description","packageName","api","example","isFull","className","style","list","title","code","scope","component","manifest"],"sourceRoot":""}