{"version":3,"file":"static/js/830.146aa5a1.chunk.js","mappings":"0eAGMA,EAAgBC,IAChB,mBAAmBC,KAAKD,EAAKE,cAC/BF,GAAQ,MAEHA,GAUHG,EAAWC,IAA+E,IAA9E,KAAEC,EAAI,SAAEC,GAAW,EAAK,UAAEC,EAAS,KAAEP,EAAI,MAAEQ,EAAK,OAAEC,EAAS,IAAcL,EAAPM,E,2IAAKC,CAAAP,EAAAQ,GACvF,MAAMC,EARcC,EAACC,EAAYN,EAAQH,IAC1B,UAAXG,GAAiC,KAAXA,GAChBH,EAAW,cAAgB,SAAWS,EAAWC,QAAQ,kBAAmB,IAE/EP,EAASM,EAIED,CAAcT,EAAMI,EAAQH,GAC5CW,EAAoBC,IAClBX,EACA,CACEY,UAAWb,EACX,kBAAmBA,GAErBO,GAEFO,EAAgBC,OAAOC,OAAO,CAAC,EAAGd,EAAOR,EAAO,CAAEuB,SAAUxB,EAAcC,IAAU,CAAC,GACvF,OAAOM,EACLkB,IAAAA,cAAA,MAAAC,EAAA,GAASf,EAAK,CAAEH,UAAWU,EAAmBT,MAAOY,IACnDI,IAAAA,cAAA,OAAKE,UAAS,IAAAC,OAAMd,GAAaL,MAAO,CAAEoB,cAAe,WAG3DJ,IAAAA,cAAA,IAAAC,EAAA,GAAOf,EAAK,CAAEH,UAAWU,EAAmBT,MAAOY,IACpD,C,gBC3BF,kBACA,aAEA,IAAIS,EAAS,CAAC,EAAEC,eAEhB,SAASC,IAGR,IAFA,IAAIC,EAAU,GAELC,EAAI,EAAGA,EAAIC,UAAUC,OAAQF,IAAK,CAC1C,IAAIG,EAAMF,UAAUD,GAChBG,IACHJ,EAAUK,EAAYL,EAASM,EAAWF,IAE5C,CAEA,OAAOJ,CACR,CAEA,SAASM,EAAYF,GACpB,GAAmB,kBAARA,GAAmC,kBAARA,EACrC,OAAOA,EAGR,GAAmB,kBAARA,EACV,MAAO,GAGR,GAAIG,MAAMC,QAAQJ,GACjB,OAAOL,EAAWU,MAAM,KAAML,GAG/B,GAAIA,EAAIlC,WAAamB,OAAOqB,UAAUxC,WAAakC,EAAIlC,SAASA,WAAWyC,SAAS,iBACnF,OAAOP,EAAIlC,WAGZ,IAAI8B,EAAU,GAEd,IAAK,IAAIY,KAAOR,EACXP,EAAOgB,KAAKT,EAAKQ,IAAQR,EAAIQ,KAChCZ,EAAUK,EAAYL,EAASY,IAIjC,OAAOZ,CACR,CAEA,SAASK,EAAaS,EAAOC,GAC5B,OAAKA,EAIDD,EACIA,EAAQ,IAAMC,EAGfD,EAAQC,EAPPD,CAQT,CAEqCE,EAAOC,SAC3ClB,EAAWmB,QAAUnB,EACrBiB,EAAOC,QAAUlB,QAKhB,KAFwB,EAAF,WACtB,OAAOA,CACP,UAFoB,OAEpB,YAIF,CArEA,E","sources":["../../src/index.js","../../node_modules/classnames/index.js"],"sourcesContent":["import React from 'react';\nimport classnames from 'classnames';\n\nconst calculateSize = size => {\n  if (/^[1-9]+[0-9]*]*$/.test(size.toString())) {\n    size += 'px';\n  }\n  return size;\n};\n\nconst calculateType = (prefixType, prefix, colorful) => {\n  if (prefix === 'icon-' || prefix === '') {\n    return (colorful ? 'icon-color-' : 'icon-') + prefixType.replace(/^icon-(color-)?/, '');\n  }\n  return prefix + prefixType;\n};\n\nconst Iconfont = ({ type, colorful = false, className, size, style, prefix = '', ...other }) => {\n  const fontClass = calculateType(type, prefix, colorful),\n    computedClassName = classnames(\n      className,\n      {\n        iconfont: !colorful,\n        'iconfont--color': colorful\n      },\n      fontClass\n    ),\n    computedStyle = Object.assign({}, style, size ? { fontSize: calculateSize(size) } : {});\n  return colorful ? (\n    <svg {...other} className={computedClassName} style={computedStyle}>\n      <use xlinkHref={`#${fontClass}`} style={{ pointerEvents: 'none' }} />\n    </svg>\n  ) : (\n    <i {...other} className={computedClassName} style={computedStyle} />\n  );\n};\n\nexport default Iconfont;\n","/*!\n\tCopyright (c) 2018 Jed Watson.\n\tLicensed under the MIT License (MIT), see\n\thttp://jedwatson.github.io/classnames\n*/\n/* global define */\n\n(function () {\n\t'use strict';\n\n\tvar hasOwn = {}.hasOwnProperty;\n\n\tfunction classNames () {\n\t\tvar classes = '';\n\n\t\tfor (var i = 0; i < arguments.length; i++) {\n\t\t\tvar arg = arguments[i];\n\t\t\tif (arg) {\n\t\t\t\tclasses = appendClass(classes, parseValue(arg));\n\t\t\t}\n\t\t}\n\n\t\treturn classes;\n\t}\n\n\tfunction parseValue (arg) {\n\t\tif (typeof arg === 'string' || typeof arg === 'number') {\n\t\t\treturn arg;\n\t\t}\n\n\t\tif (typeof arg !== 'object') {\n\t\t\treturn '';\n\t\t}\n\n\t\tif (Array.isArray(arg)) {\n\t\t\treturn classNames.apply(null, arg);\n\t\t}\n\n\t\tif (arg.toString !== Object.prototype.toString && !arg.toString.toString().includes('[native code]')) {\n\t\t\treturn arg.toString();\n\t\t}\n\n\t\tvar classes = '';\n\n\t\tfor (var key in arg) {\n\t\t\tif (hasOwn.call(arg, key) && arg[key]) {\n\t\t\t\tclasses = appendClass(classes, key);\n\t\t\t}\n\t\t}\n\n\t\treturn classes;\n\t}\n\n\tfunction appendClass (value, newClass) {\n\t\tif (!newClass) {\n\t\t\treturn value;\n\t\t}\n\t\n\t\tif (value) {\n\t\t\treturn value + ' ' + newClass;\n\t\t}\n\t\n\t\treturn value + newClass;\n\t}\n\n\tif (typeof module !== 'undefined' && module.exports) {\n\t\tclassNames.default = classNames;\n\t\tmodule.exports = classNames;\n\t} else if (typeof define === 'function' && typeof define.amd === 'object' && define.amd) {\n\t\t// register as 'classnames', consistent with npm package name\n\t\tdefine('classnames', [], function () {\n\t\t\treturn classNames;\n\t\t});\n\t} else {\n\t\twindow.classNames = classNames;\n\t}\n}());\n"],"names":["calculateSize","size","test","toString","Iconfont","_ref","type","colorful","className","style","prefix","other","_objectWithoutPropertiesLoose","_excluded","fontClass","calculateType","prefixType","replace","computedClassName","classnames","iconfont","computedStyle","Object","assign","fontSize","React","_extends","xlinkHref","concat","pointerEvents","hasOwn","hasOwnProperty","classNames","classes","i","arguments","length","arg","appendClass","parseValue","Array","isArray","apply","prototype","includes","key","call","value","newClass","module","exports","default"],"sourceRoot":""}